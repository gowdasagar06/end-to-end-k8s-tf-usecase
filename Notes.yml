namespace.yml
---
apiVersion: v1
kind: Namespace
metadata:
  name: prod
  annotations:
    argocd.argoproj.io/sync-wave: "-1"


mysql-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "0"  
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS mydb;
    USE mydb;
    CREATE TABLE messages (id INT AUTO_INCREMENT PRIMARY KEY, message TEXT);

mysql-secrets.yml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "1"  
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: YWRtaW4=

storage-ebs.yml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
  annotations:
    argocd.argoproj.io/sync-wave: "2"
provisioner: ebs.csi.aws.com
reclaimPolicy: Retain
  #parameters:
  #type: gp2


pvc-ebs.yml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-pvc
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: ebs-sc



mysql-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              value: "mydb"
            - name: MYSQL_USER
              value: "admin"
            - name: MYSQL_PASSWORD
              value: "admin"
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-pv-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        - name: mysql-pv-storage
          persistentVolumeClaim:
            claimName: ebs-pvc


mysql-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "5"  
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

two-tier-app-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: two-tier-app
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "6"  
  labels:
    app: two-tier-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: two-tier-app
  template:
    metadata:
      labels:
        app: two-tier-app
    spec:
      containers:
        - name: two-tier-app
          image: gowdasagar/flaskapp:latest
          env:
            - name: MYSQL_HOST
              value: mysql          # this is your mysql's service clusture IP, Make sure to change it with yours
            - name: MYSQL_PASSWORD
              value: "admin"
            - name: MYSQL_USER
              value: "root"
            - name: MYSQL_DB
              value: "mydb"
          ports:
            - containerPort: 5000
          imagePullPolicy: Always

two-tier-app-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: two-tier-app-service
  namespace: prod
  annotations:
    argocd.argoproj.io/sync-wave: "7"  
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  selector:
    app: two-tier-app
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
    


